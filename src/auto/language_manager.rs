// This file was generated by gir (3c73dd9+) from gir-files (2e2a9ca)
// DO NOT EDIT

use Language;
use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct LanguageManager(Object<ffi::GtkSourceLanguageManager>);

    match fn {
        get_type => || ffi::gtk_source_language_manager_get_type(),
    }
}

impl LanguageManager {
    pub fn new() -> LanguageManager {
        unsafe {
            from_glib_full(ffi::gtk_source_language_manager_new())
        }
    }

    pub fn get_default() -> Option<LanguageManager> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_manager_get_default())
        }
    }
}

pub trait LanguageManagerExt {
    fn get_language(&self, id: &str) -> Option<Language>;

    fn get_language_ids(&self) -> Vec<String>;

    fn get_search_path(&self) -> Vec<String>;

    fn guess_language<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, filename: P, content_type: Q) -> Option<Language>;

    fn set_search_path(&self, dirs: &[&str]);
}

impl<O: IsA<LanguageManager>> LanguageManagerExt for O {
    fn get_language(&self, id: &str) -> Option<Language> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_manager_get_language(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    fn get_language_ids(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gtk_source_language_manager_get_language_ids(self.to_glib_none().0))
        }
    }

    fn get_search_path(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::gtk_source_language_manager_get_search_path(self.to_glib_none().0))
        }
    }

    fn guess_language<'a, 'b, P: Into<Option<&'a str>>, Q: Into<Option<&'b str>>>(&self, filename: P, content_type: Q) -> Option<Language> {
        let filename = filename.into();
        let filename = filename.to_glib_none();
        let content_type = content_type.into();
        let content_type = content_type.to_glib_none();
        unsafe {
            from_glib_none(ffi::gtk_source_language_manager_guess_language(self.to_glib_none().0, filename.0, content_type.0))
        }
    }

    fn set_search_path(&self, dirs: &[&str]) {
        unsafe {
            ffi::gtk_source_language_manager_set_search_path(self.to_glib_none().0, dirs.to_glib_none().0);
        }
    }
}
