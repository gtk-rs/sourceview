// This file was generated by gir (3c73dd9+) from gir-files (2e2a9ca)
// DO NOT EDIT

#[cfg(feature = "v3_14")]
use CompressionType;
#[cfg(feature = "v3_14")]
use Encoding;
#[cfg(feature = "v3_14")]
use NewlineType;
use ffi;
#[cfg(feature = "v3_14")]
use gio;
use glib;
#[cfg(feature = "v3_18")]
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
#[cfg(feature = "v3_18")]
use gobject_ffi;

glib_wrapper! {
    pub struct File(Object<ffi::GtkSourceFile>);

    match fn {
        get_type => || ffi::gtk_source_file_get_type(),
    }
}

impl File {
    #[cfg(feature = "v3_14")]
    pub fn new() -> File {
        unsafe {
            from_glib_full(ffi::gtk_source_file_new())
        }
    }
}

pub trait FileExt {
    #[cfg(feature = "v3_18")]
    fn check_file_on_disk(&self);

    #[cfg(feature = "v3_14")]
    fn get_compression_type(&self) -> CompressionType;

    #[cfg(feature = "v3_14")]
    fn get_encoding(&self) -> Option<Encoding>;

    #[cfg(feature = "v3_14")]
    fn get_location(&self) -> Option<gio::File>;

    #[cfg(feature = "v3_14")]
    fn get_newline_type(&self) -> NewlineType;

    #[cfg(feature = "v3_18")]
    fn is_deleted(&self) -> bool;

    #[cfg(feature = "v3_18")]
    fn is_externally_modified(&self) -> bool;

    #[cfg(feature = "v3_18")]
    fn is_local(&self) -> bool;

    #[cfg(feature = "v3_18")]
    fn is_readonly(&self) -> bool;

    #[cfg(feature = "v3_14")]
    fn set_location<'a, P: IsA<gio::File> + 'a, Q: Into<Option<&'a P>>>(&self, location: Q);

    //#[cfg(feature = "v3_14")]
    //fn set_mount_operation_factory<'a, P: Into<Option<&'a /*Ignored*/glib::DestroyNotify>>>(&self, callback: /*Unknown conversion*//*Unimplemented*/MountOperationFactory, user_data: /*Unimplemented*/Fundamental: Pointer, notify: P);

    #[cfg(feature = "v3_18")]
    fn get_property_read_only(&self) -> bool;
}

impl<O: IsA<File> + IsA<glib::object::Object>> FileExt for O {
    #[cfg(feature = "v3_18")]
    fn check_file_on_disk(&self) {
        unsafe {
            ffi::gtk_source_file_check_file_on_disk(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_compression_type(&self) -> CompressionType {
        unsafe {
            from_glib(ffi::gtk_source_file_get_compression_type(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_encoding(&self) -> Option<Encoding> {
        unsafe {
            from_glib_none(ffi::gtk_source_file_get_encoding(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_location(&self) -> Option<gio::File> {
        unsafe {
            from_glib_none(ffi::gtk_source_file_get_location(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_newline_type(&self) -> NewlineType {
        unsafe {
            from_glib(ffi::gtk_source_file_get_newline_type(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    fn is_deleted(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_file_is_deleted(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    fn is_externally_modified(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_file_is_externally_modified(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    fn is_local(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_file_is_local(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    fn is_readonly(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_file_is_readonly(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn set_location<'a, P: IsA<gio::File> + 'a, Q: Into<Option<&'a P>>>(&self, location: Q) {
        let location = location.into();
        let location = location.to_glib_none();
        unsafe {
            ffi::gtk_source_file_set_location(self.to_glib_none().0, location.0);
        }
    }

    //#[cfg(feature = "v3_14")]
    //fn set_mount_operation_factory<'a, P: Into<Option<&'a /*Ignored*/glib::DestroyNotify>>>(&self, callback: /*Unknown conversion*//*Unimplemented*/MountOperationFactory, user_data: /*Unimplemented*/Fundamental: Pointer, notify: P) {
    //    unsafe { TODO: call ffi::gtk_source_file_set_mount_operation_factory() }
    //}

    #[cfg(feature = "v3_18")]
    fn get_property_read_only(&self) -> bool {
        let mut value = Value::from(&false);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "read-only".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }
}
