// This file was generated by gir (3c73dd9+) from gir-files (2e2a9ca)
// DO NOT EDIT

use ffi;
use gdk_pixbuf;
#[cfg(feature = "v3_18")]
use gio;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct CompletionProposal(Object<ffi::GtkSourceCompletionProposal>);

    match fn {
        get_type => || ffi::gtk_source_completion_proposal_get_type(),
    }
}

pub trait CompletionProposalExt {
    fn changed(&self);

    fn equal<P: IsA<CompletionProposal>>(&self, other: &P) -> bool;

    #[cfg(feature = "v3_18")]
    fn get_gicon(&self) -> Option<gio::Icon>;

    fn get_icon(&self) -> Option<gdk_pixbuf::Pixbuf>;

    #[cfg(feature = "v3_18")]
    fn get_icon_name(&self) -> Option<String>;

    fn get_info(&self) -> Option<String>;

    fn get_label(&self) -> Option<String>;

    fn get_markup(&self) -> Option<String>;

    fn get_text(&self) -> Option<String>;

    fn hash(&self) -> u32;

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<CompletionProposal> + IsA<glib::object::Object>> CompletionProposalExt for O {
    fn changed(&self) {
        unsafe {
            ffi::gtk_source_completion_proposal_changed(self.to_glib_none().0);
        }
    }

    fn equal<P: IsA<CompletionProposal>>(&self, other: &P) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_completion_proposal_equal(self.to_glib_none().0, other.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    fn get_gicon(&self) -> Option<gio::Icon> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_proposal_get_gicon(self.to_glib_none().0))
        }
    }

    fn get_icon(&self) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_proposal_get_icon(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    fn get_icon_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_completion_proposal_get_icon_name(self.to_glib_none().0))
        }
    }

    fn get_info(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_info(self.to_glib_none().0))
        }
    }

    fn get_label(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_label(self.to_glib_none().0))
        }
    }

    fn get_markup(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_markup(self.to_glib_none().0))
        }
    }

    fn get_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_source_completion_proposal_get_text(self.to_glib_none().0))
        }
    }

    fn hash(&self) -> u32 {
        unsafe {
            ffi::gtk_source_completion_proposal_hash(self.to_glib_none().0)
        }
    }

    fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "changed",
                transmute(changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn changed_trampoline<P>(this: *mut ffi::GtkSourceCompletionProposal, f: glib_ffi::gpointer)
where P: IsA<CompletionProposal> {
    callback_guard!();
    let f: &Box_<Fn(&P) + 'static> = transmute(f);
    f(&CompletionProposal::from_glib_none(this).downcast_unchecked())
}
