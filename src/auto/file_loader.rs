// This file was generated by gir (3c73dd9+) from gir-files (2e2a9ca)
// DO NOT EDIT

#[cfg(feature = "v3_14")]
use Buffer;
#[cfg(feature = "v3_14")]
use CompressionType;
#[cfg(feature = "v3_14")]
use Encoding;
#[cfg(feature = "v3_14")]
use File;
#[cfg(feature = "v3_14")]
use NewlineType;
use ffi;
#[cfg(feature = "v3_14")]
use gio;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct FileLoader(Object<ffi::GtkSourceFileLoader>);

    match fn {
        get_type => || ffi::gtk_source_file_loader_get_type(),
    }
}

impl FileLoader {
    #[cfg(feature = "v3_14")]
    pub fn new(buffer: &Buffer, file: &File) -> FileLoader {
        unsafe {
            from_glib_full(ffi::gtk_source_file_loader_new(buffer.to_glib_none().0, file.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    pub fn new_from_stream<P: IsA<gio::InputStream>>(buffer: &Buffer, file: &File, stream: &P) -> FileLoader {
        unsafe {
            from_glib_full(ffi::gtk_source_file_loader_new_from_stream(buffer.to_glib_none().0, file.to_glib_none().0, stream.to_glib_none().0))
        }
    }
}

pub trait FileLoaderExt {
    #[cfg(feature = "v3_14")]
    fn get_buffer(&self) -> Option<Buffer>;

    #[cfg(feature = "v3_14")]
    fn get_compression_type(&self) -> CompressionType;

    #[cfg(feature = "v3_14")]
    fn get_encoding(&self) -> Option<Encoding>;

    #[cfg(feature = "v3_14")]
    fn get_file(&self) -> Option<File>;

    #[cfg(feature = "v3_14")]
    fn get_input_stream(&self) -> Option<gio::InputStream>;

    #[cfg(feature = "v3_14")]
    fn get_location(&self) -> Option<gio::File>;

    #[cfg(feature = "v3_14")]
    fn get_newline_type(&self) -> NewlineType;

    //#[cfg(feature = "v3_14")]
    //fn load_async<'a, 'b, 'c, 'd, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::FileProgressCallback>>, R: Into<Option<&'c /*Ignored*/glib::DestroyNotify>>, S: Into<Option<&'d /*Ignored*/gio::AsyncReadyCallback>>>(&self, io_priority: i32, cancellable: P, progress_callback: Q, progress_callback_data: /*Unimplemented*/Fundamental: Pointer, progress_callback_notify: R, callback: S, user_data: /*Unimplemented*/Fundamental: Pointer);

    //#[cfg(feature = "v3_14")]
    //fn load_finish<P: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &P) -> Result<(), Error>;

    #[cfg(feature = "v3_14")]
    fn set_candidate_encodings(&self, candidate_encodings: &[&Encoding]);
}

impl<O: IsA<FileLoader>> FileLoaderExt for O {
    #[cfg(feature = "v3_14")]
    fn get_buffer(&self) -> Option<Buffer> {
        unsafe {
            from_glib_none(ffi::gtk_source_file_loader_get_buffer(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_compression_type(&self) -> CompressionType {
        unsafe {
            from_glib(ffi::gtk_source_file_loader_get_compression_type(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_encoding(&self) -> Option<Encoding> {
        unsafe {
            from_glib_none(ffi::gtk_source_file_loader_get_encoding(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_file(&self) -> Option<File> {
        unsafe {
            from_glib_none(ffi::gtk_source_file_loader_get_file(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_input_stream(&self) -> Option<gio::InputStream> {
        unsafe {
            from_glib_none(ffi::gtk_source_file_loader_get_input_stream(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_location(&self) -> Option<gio::File> {
        unsafe {
            from_glib_none(ffi::gtk_source_file_loader_get_location(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_newline_type(&self) -> NewlineType {
        unsafe {
            from_glib(ffi::gtk_source_file_loader_get_newline_type(self.to_glib_none().0))
        }
    }

    //#[cfg(feature = "v3_14")]
    //fn load_async<'a, 'b, 'c, 'd, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::FileProgressCallback>>, R: Into<Option<&'c /*Ignored*/glib::DestroyNotify>>, S: Into<Option<&'d /*Ignored*/gio::AsyncReadyCallback>>>(&self, io_priority: i32, cancellable: P, progress_callback: Q, progress_callback_data: /*Unimplemented*/Fundamental: Pointer, progress_callback_notify: R, callback: S, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::gtk_source_file_loader_load_async() }
    //}

    //#[cfg(feature = "v3_14")]
    //fn load_finish<P: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &P) -> Result<(), Error> {
    //    unsafe { TODO: call ffi::gtk_source_file_loader_load_finish() }
    //}

    #[cfg(feature = "v3_14")]
    fn set_candidate_encodings(&self, candidate_encodings: &[&Encoding]) {
        unsafe {
            ffi::gtk_source_file_loader_set_candidate_encodings(self.to_glib_none().0, candidate_encodings.to_glib_none().0);
        }
    }
}
