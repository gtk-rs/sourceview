// This file was generated by gir (3c73dd9+) from gir-files (2e2a9ca)
// DO NOT EDIT

#[cfg(feature = "v3_10")]
use Buffer;
#[cfg(feature = "v3_10")]
use Error;
#[cfg(feature = "v3_10")]
use SearchSettings;
#[cfg(feature = "v3_16")]
use Style;
use ffi;
use glib::object::IsA;
use glib::translate::*;
#[cfg(feature = "v3_10")]
use gtk;
#[cfg(feature = "v3_10")]
use std::ptr;

glib_wrapper! {
    pub struct SearchContext(Object<ffi::GtkSourceSearchContext>);

    match fn {
        get_type => || ffi::gtk_source_search_context_get_type(),
    }
}

impl SearchContext {
    #[cfg(feature = "v3_10")]
    pub fn new<'a, P: Into<Option<&'a SearchSettings>>>(buffer: &Buffer, settings: P) -> SearchContext {
        let settings = settings.into();
        let settings = settings.to_glib_none();
        unsafe {
            from_glib_full(ffi::gtk_source_search_context_new(buffer.to_glib_none().0, settings.0))
        }
    }
}

pub trait SearchContextExt {
    #[cfg(feature = "v3_10")]
    fn backward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter)>;

    //#[cfg(feature = "v3_10")]
    //fn backward_async<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>>(&self, iter: &gtk::TextIter, cancellable: P, callback: Q, user_data: /*Unimplemented*/Fundamental: Pointer);

    //#[cfg(feature = "v3_10")]
    //fn backward_finish<P: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &P) -> Result<(gtk::TextIter, gtk::TextIter), Error>;

    #[cfg(feature = "v3_10")]
    fn forward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter)>;

    //#[cfg(feature = "v3_10")]
    //fn forward_async<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>>(&self, iter: &gtk::TextIter, cancellable: P, callback: Q, user_data: /*Unimplemented*/Fundamental: Pointer);

    //#[cfg(feature = "v3_10")]
    //fn forward_finish<P: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &P) -> Result<(gtk::TextIter, gtk::TextIter), Error>;

    #[cfg(feature = "v3_10")]
    fn get_buffer(&self) -> Option<Buffer>;

    #[cfg(feature = "v3_10")]
    fn get_highlight(&self) -> bool;

    #[cfg(feature = "v3_16")]
    fn get_match_style(&self) -> Option<Style>;

    #[cfg(feature = "v3_10")]
    fn get_occurrence_position(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter) -> i32;

    #[cfg(feature = "v3_10")]
    fn get_occurrences_count(&self) -> i32;

    #[cfg(feature = "v3_10")]
    fn get_regex_error(&self) -> Option<Error>;

    #[cfg(feature = "v3_10")]
    fn get_settings(&self) -> Option<SearchSettings>;

    #[cfg(feature = "v3_10")]
    fn replace(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter, replace: &str, replace_length: i32) -> Result<(), Error>;

    #[cfg(feature = "v3_10")]
    fn replace_all(&self, replace: &str, replace_length: i32) -> Result<(), Error>;

    #[cfg(feature = "v3_10")]
    fn set_highlight(&self, highlight: bool);

    #[cfg(feature = "v3_16")]
    fn set_match_style<'a, P: Into<Option<&'a Style>>>(&self, match_style: P);

    #[cfg(feature = "v3_10")]
    fn set_settings<'a, P: Into<Option<&'a SearchSettings>>>(&self, settings: P);
}

impl<O: IsA<SearchContext>> SearchContextExt for O {
    #[cfg(feature = "v3_10")]
    fn backward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter)> {
        unsafe {
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let ret = from_glib(ffi::gtk_source_search_context_backward(self.to_glib_none().0, iter.to_glib_none().0, match_start.to_glib_none_mut().0, match_end.to_glib_none_mut().0));
            if ret { Some((match_start, match_end)) } else { None }
        }
    }

    //#[cfg(feature = "v3_10")]
    //fn backward_async<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>>(&self, iter: &gtk::TextIter, cancellable: P, callback: Q, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::gtk_source_search_context_backward_async() }
    //}

    //#[cfg(feature = "v3_10")]
    //fn backward_finish<P: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &P) -> Result<(gtk::TextIter, gtk::TextIter), Error> {
    //    unsafe { TODO: call ffi::gtk_source_search_context_backward_finish() }
    //}

    #[cfg(feature = "v3_10")]
    fn forward(&self, iter: &gtk::TextIter) -> Option<(gtk::TextIter, gtk::TextIter)> {
        unsafe {
            let mut match_start = gtk::TextIter::uninitialized();
            let mut match_end = gtk::TextIter::uninitialized();
            let ret = from_glib(ffi::gtk_source_search_context_forward(self.to_glib_none().0, iter.to_glib_none().0, match_start.to_glib_none_mut().0, match_end.to_glib_none_mut().0));
            if ret { Some((match_start, match_end)) } else { None }
        }
    }

    //#[cfg(feature = "v3_10")]
    //fn forward_async<'a, 'b, P: Into<Option<&'a gio::Cancellable>>, Q: Into<Option<&'b /*Ignored*/gio::AsyncReadyCallback>>>(&self, iter: &gtk::TextIter, cancellable: P, callback: Q, user_data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::gtk_source_search_context_forward_async() }
    //}

    //#[cfg(feature = "v3_10")]
    //fn forward_finish<P: IsA</*Ignored*/gio::AsyncResult>>(&self, result: &P) -> Result<(gtk::TextIter, gtk::TextIter), Error> {
    //    unsafe { TODO: call ffi::gtk_source_search_context_forward_finish() }
    //}

    #[cfg(feature = "v3_10")]
    fn get_buffer(&self) -> Option<Buffer> {
        unsafe {
            from_glib_none(ffi::gtk_source_search_context_get_buffer(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_10")]
    fn get_highlight(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_search_context_get_highlight(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_16")]
    fn get_match_style(&self) -> Option<Style> {
        unsafe {
            from_glib_none(ffi::gtk_source_search_context_get_match_style(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_10")]
    fn get_occurrence_position(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter) -> i32 {
        unsafe {
            ffi::gtk_source_search_context_get_occurrence_position(self.to_glib_none().0, match_start.to_glib_none().0, match_end.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_10")]
    fn get_occurrences_count(&self) -> i32 {
        unsafe {
            ffi::gtk_source_search_context_get_occurrences_count(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_10")]
    fn get_regex_error(&self) -> Option<Error> {
        unsafe {
            from_glib_full(ffi::gtk_source_search_context_get_regex_error(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_10")]
    fn get_settings(&self) -> Option<SearchSettings> {
        unsafe {
            from_glib_none(ffi::gtk_source_search_context_get_settings(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_10")]
    fn replace(&self, match_start: &gtk::TextIter, match_end: &gtk::TextIter, replace: &str, replace_length: i32) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::gtk_source_search_context_replace(self.to_glib_none().0, match_start.to_glib_none().0, match_end.to_glib_none().0, replace.to_glib_none().0, replace_length, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v3_10")]
    fn replace_all(&self, replace: &str, replace_length: i32) -> Result<(), Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::gtk_source_search_context_replace_all(self.to_glib_none().0, replace.to_glib_none().0, replace_length, &mut error);
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[cfg(feature = "v3_10")]
    fn set_highlight(&self, highlight: bool) {
        unsafe {
            ffi::gtk_source_search_context_set_highlight(self.to_glib_none().0, highlight.to_glib());
        }
    }

    #[cfg(feature = "v3_16")]
    fn set_match_style<'a, P: Into<Option<&'a Style>>>(&self, match_style: P) {
        let match_style = match_style.into();
        let match_style = match_style.to_glib_none();
        unsafe {
            ffi::gtk_source_search_context_set_match_style(self.to_glib_none().0, match_style.0);
        }
    }

    #[cfg(feature = "v3_10")]
    fn set_settings<'a, P: Into<Option<&'a SearchSettings>>>(&self, settings: P) {
        let settings = settings.into();
        let settings = settings.to_glib_none();
        unsafe {
            ffi::gtk_source_search_context_set_settings(self.to_glib_none().0, settings.0);
        }
    }
}
