// This file was generated by gir (3c73dd9+) from gir-files (2e2a9ca)
// DO NOT EDIT

use GutterRenderer;
use View;
use ffi;
use gdk;
use glib;
use glib::Value;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use gtk;
use std::mem::transmute;

glib_wrapper! {
    pub struct Gutter(Object<ffi::GtkSourceGutter>);

    match fn {
        get_type => || ffi::gtk_source_gutter_get_type(),
    }
}

pub trait GutterExt {
    fn get_renderer_at_pos(&self, x: i32, y: i32) -> Option<GutterRenderer>;

    fn get_window(&self) -> Option<gdk::Window>;

    fn insert<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32) -> bool;

    fn queue_draw(&self);

    fn remove<P: IsA<GutterRenderer>>(&self, renderer: &P);

    fn reorder<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32);

    fn set_padding(&self, xpad: i32, ypad: i32);

    fn get_property_view(&self) -> Option<View>;

    fn get_property_window_type(&self) -> gtk::TextWindowType;

    fn get_property_xpad(&self) -> i32;

    fn set_property_xpad(&self, xpad: i32);

    fn get_property_ypad(&self) -> i32;

    fn set_property_ypad(&self, ypad: i32);
}

impl<O: IsA<Gutter> + IsA<glib::object::Object>> GutterExt for O {
    fn get_renderer_at_pos(&self, x: i32, y: i32) -> Option<GutterRenderer> {
        unsafe {
            from_glib_none(ffi::gtk_source_gutter_get_renderer_at_pos(self.to_glib_none().0, x, y))
        }
    }

    fn get_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_source_gutter_get_window(self.to_glib_none().0))
        }
    }

    fn insert<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_gutter_insert(self.to_glib_none().0, renderer.to_glib_none().0, position))
        }
    }

    fn queue_draw(&self) {
        unsafe {
            ffi::gtk_source_gutter_queue_draw(self.to_glib_none().0);
        }
    }

    fn remove<P: IsA<GutterRenderer>>(&self, renderer: &P) {
        unsafe {
            ffi::gtk_source_gutter_remove(self.to_glib_none().0, renderer.to_glib_none().0);
        }
    }

    fn reorder<P: IsA<GutterRenderer>>(&self, renderer: &P, position: i32) {
        unsafe {
            ffi::gtk_source_gutter_reorder(self.to_glib_none().0, renderer.to_glib_none().0, position);
        }
    }

    fn set_padding(&self, xpad: i32, ypad: i32) {
        unsafe {
            ffi::gtk_source_gutter_set_padding(self.to_glib_none().0, xpad, ypad);
        }
    }

    fn get_property_view(&self) -> Option<View> {
        let mut value = Value::from(None::<&View>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "view".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn get_property_window_type(&self) -> gtk::TextWindowType {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "window-type".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    fn get_property_xpad(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "xpad".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_xpad(&self, xpad: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "xpad".to_glib_none().0, Value::from(&xpad).to_glib_none().0);
        }
    }

    fn get_property_ypad(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "ypad".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    fn set_property_ypad(&self, ypad: i32) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "ypad".to_glib_none().0, Value::from(&ypad).to_glib_none().0);
        }
    }
}
