// This file was generated by gir (3c73dd9+) from gir-files (2e2a9ca)
// DO NOT EDIT

use View;
use ffi;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::translate::*;
use gobject_ffi;
use gtk;
use gtk_ffi;

glib_wrapper! {
    pub struct Map(Object<ffi::GtkSourceMap>): [
        View,
        gtk::TextView => gtk_ffi::GtkTextView,
        gtk::Widget => gtk_ffi::GtkWidget,
    ];

    match fn {
        get_type => || ffi::gtk_source_map_get_type(),
    }
}

impl Map {
    #[cfg(feature = "v3_18")]
    pub fn new() -> Map {
        unsafe {
            gtk::Widget::from_glib_none(ffi::gtk_source_map_new()).downcast_unchecked()
        }
    }
}

pub trait MapExt {
    #[cfg(feature = "v3_18")]
    fn get_view(&self) -> Option<View>;

    #[cfg(feature = "v3_18")]
    fn set_view<P: IsA<View>>(&self, view: &P);

    fn get_property_view(&self) -> Option<View>;

    fn set_property_view<P: IsA<View> + IsA<glib::object::Object>>(&self, view: Option<&P>);
}

impl<O: IsA<Map> + IsA<glib::object::Object>> MapExt for O {
    #[cfg(feature = "v3_18")]
    fn get_view(&self) -> Option<View> {
        unsafe {
            from_glib_none(ffi::gtk_source_map_get_view(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    fn set_view<P: IsA<View>>(&self, view: &P) {
        unsafe {
            ffi::gtk_source_map_set_view(self.to_glib_none().0, view.to_glib_none().0);
        }
    }

    fn get_property_view(&self) -> Option<View> {
        let mut value = Value::from(None::<&View>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "view".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_view<P: IsA<View> + IsA<glib::object::Object>>(&self, view: Option<&P>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "view".to_glib_none().0, Value::from(view).to_glib_none().0);
        }
    }
}
